demo()
q()
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("manipulate")
x <- 1
print(x)
y <-
5
clear
cl
clr
clear()
y
z
wc
library(datasets)
data(iris)
iris
?split
names$iris
names(iris)
iris$Species
levels(iris$Species)
split(iris, levels(iris$Species))
data.virginca <- split(iris, levels(iris$Species))$virginica
data.virginca
data.virginca
dim(data.virginca)
data.virginca$species
data.virginca$Species
iris$Species
levels(iris$Species)
rm(data.virginca)
data.virginica <- iris[iris$Species == "virginica", ]
data.virginica
mean(data.virginica$Sepal.Length)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
?cat
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
?<<-
?<-
help(<-)
help(mean)
help('<-')
setwd("D:/Repos/ProgrammingAssignment2")
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
source('~/.active-rstudio-document')
?matrix
as.matrix(1:9)
as.matrix(1:9, nrow=3)
as.matrix(1:9, nrow=3, ncol =3)
x <- as.matrix(1:9, nrow=3, ncol =3)
x <- matrix(1:9, nrow=3, ncol =3)
x
x <- matrix(1:9, nrow=3, ncol =3, byrow = T)
x
makeCacheMatrix(x)
matrix.wrapper <- makeCacheMatrix
matrix.wrapper <- makeCacheMatrix(x)
matrix.wrapper
cacheSolve(matrix.wrapper)
?det
det(x)
x <- matrix(3:12, nrow = 3)
x <- matrix(3:11, nrow = 3)
det(x)
x <- matrix(5:14, nrow = 3)
x <- matrix(5:13, nrow = 3)
det(x)
?seq
x <- matrix(seq(to = 16, by = 2), nrow = 2)
x <- matrix(seq(to = 16, by = 2), nrow = 3)
x <- matrix(seq(to = 18, by = 2), nrow = 3)
det(x)
x <- matrix(seq(by = 2.5, length.out = 9), nrow = 3)
det(x)
x <- matrix(seq(by = 2.3685, length.out = 9), nrow = 3)
det(x)
x <- matrix( c(1,1,3,2,0,-1,0,4,0), nrow=3 )
x
det(x)
makeCacheMatrix(x)
matrix.wrapper <- makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(matrix.wrapper)
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
x <- matrix( c(1,1,3,2,0,-1,0,4,0), nrow=3 )
matrix.wrapper <- makeCacheMatrix(x)
cacheSolve(matrix.wrapper)
cacheSolve(matrix.wrapper)
matrix.wrapper$get
matrix.wrapper$get()
x
cacheSolve(matrix.wrapper)
x <- matrix(c(1,1,0,-3,2,1,3,3,2), nrow=3)
x <- matrix( c(1,1,3,2,0,-1,0,4,0), nrow=3)
x <- matrix(c(1,1,0,-3,2,1,3,3,2), nrow=3)
cacheSolve(matrix.wrapper)
?all.equal
?==
?'=='
a <- matrix( c(1,1,3,2,0,-1,0,4,0), nrow=3)
rm a
rm(a)
rm(x)
a <- matrix( c(1,1,3,2,0,-1,0,4,0), nrow=3)
a <- matrix(c(1,1,0,-3,2,1,3,3,2), nrow=3)
?parent.env
parent.env(matrix.wrapper$get)
enviroment(matrix.wrapper)
environment(matrix.wrapper)
matrix.wrapper
globalenv()
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
a <- matrix( c(1,1,3,2,0,-1,0,4,0), nrow=3)
a <- matrix(c(1,1,0,-3,2,1,3,3,2), nrow=3)
z <- makeCacheMatrix(a)
cacheSolve(z)
z.get()
z$get()
a
a == z$get()
?ident
?identica.
?identical
identical(a.z$get())
identical(a,z$get())
!identical(a,z$get())
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
b1 <- a
b2 <- matrix( c(1,1,3,2,0,-1,0,4,0), nrow=3)
identical(b1, b2)
z$get()
identical(a, z$get())
a <- b1
a <- b2
identical(a, z$get())
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
a <- b1
rm(matrix.wrapper)
z <- makeCacheMatrix(a)
cacheSolve(z)
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
cacheSolve(z)
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
cacheSolve(z)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
a <- b2
cacheSolve(z)
z$get()
b1
b2
a
z$get()
a
!identical(z$get(), a)
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
cacheSolve(z)
a <- b1
cacheSolve(z)
cacheSolve(z)
source('~/.active-rstudio-document')
cacheSolve(z)
?get
get(a)
?substitute
?deparse
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(a)
z <- makeCacheMatrix(a)
cacheSolve()
cacheSolve(z)
}
z$var.name
type(z$var.name)
class(z$var.name)
get(z$var.name)
source('~/.active-rstudio-document')
cacheSolve(z)
a <- b2
cacheSolve(z)
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
b1 <- matrix(c(1,1,3,-2,-1,5,0,4,2), nrow = 3)
b2 <- matrix(c(0,1,-4,2,1,-5,3,1,2), nrow = 3)
a <- b1
z <- makeCacheMatrix(a)
cacheSolve(z)
cacheSolve(z)
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
cacheSolve(z)
a <- b2
cacheSolve(z)
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
cacheSolve(z)
a <- b1
cacheSolve(z)
source('~/.active-rstudio-document')
a <- b2
cacheSolve(z)
rm(a)
wrwr <- b1
z<-makeCacheMatrix(wrwr)
cacheSolve(z)
wrwr <- b2
cacheSolve(z)
source('D:/Repos/ProgrammingAssignment2/cachematrix.R')
cacheSolve(z)
wrwr <- b1
cacheSolve(z)
z.set(b2)
z$set(b2)
cacheSolve(z)
z$set(b1)
cacheSolve(z)
z$get()
z$set(b2)
z$get()
cacheSolve(z)
z$get()
b2
